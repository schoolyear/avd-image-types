package main

import (
	"bytes"
	"flag"
	"github.com/buger/jsonparser"
	"log"
	"os"
	"text/template"
)

var (
	flagSpec    = flag.String("spec", "", "path to spec file")
	flagPackage = flag.String("package", "", "name of the package")
	flagOutput  = flag.String("output", "", "path to output file")
)

func main() {
	flag.Parse()

	spec, err := os.ReadFile(*flagSpec)
	if err != nil {
		log.Fatal(err)
	}

	var names []string
	_ = jsonparser.ObjectEach(spec, func(key []byte, _ []byte, _ jsonparser.ValueType, _ int) error {
		names = append(names, string(key))
		return nil
	}, "definitions")

	templateStr := `// Code generated by go generate; DO NOT EDIT.
package {{.PackageName}}

const (
	{{- range .DefinitionNames }}
    {{. }}Definition = "{{.}}"
	{{- end }}
)
`
	codeTemplate, err := template.New("schemaNames").Parse(templateStr)
	if err != nil {
		log.Fatal(err)
	}

	var buffer bytes.Buffer
	err = codeTemplate.Execute(&buffer, struct {
		PackageName     string
		DefinitionNames []string
	}{
		PackageName:     *flagPackage,
		DefinitionNames: names,
	})
	if err != nil {
		log.Fatal(err)
	}

	if err := os.WriteFile(*flagOutput, buffer.Bytes(), 0644); err != nil {
		log.Fatal(err)
	}
}
