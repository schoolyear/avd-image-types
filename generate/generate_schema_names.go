package main

import (
	"bytes"
	"flag"
	"github.com/pb33f/libopenapi"
	"log"
	"os"
	"text/template"
)

var (
	flagSpec    = flag.String("spec", "", "path to spec file")
	flagPackage = flag.String("package", "", "name of the package")
	flagOutput  = flag.String("output", "", "path to output file")
)

func main() {
	flag.Parse()

	spec, err := os.ReadFile(*flagSpec)
	if err != nil {
		log.Fatal(err)
	}

	doc, err := libopenapi.NewDocument(spec)
	if err != nil {
		log.Fatal(err)
	}

	model, errs := doc.BuildV3Model()
	if len(errs) > 0 {
		log.Fatal(errs)
	}

	var names = make([]string, 0, model.Model.Components.Schemas.Len())
	for name := range model.Model.Components.Schemas.KeysFromNewest() {
		names = append(names, name)
	}

	templateStr := `// Code generated by go generate; DO NOT EDIT.
package {{.PackageName}}

const (
	{{- range .Schemas }}
    {{. }}SchemaName = "{{.}}"
	{{- end }}
)
`
	codeTemplate, err := template.New("schemaNames").Parse(templateStr)
	if err != nil {
		log.Fatal(err)
	}

	var buffer bytes.Buffer
	err = codeTemplate.Execute(&buffer, struct {
		PackageName string
		Schemas     []string
	}{
		PackageName: *flagPackage,
		Schemas:     names,
	})
	if err != nil {
		log.Fatal(err)
	}

	if err := os.WriteFile(*flagOutput, buffer.Bytes(), 0644); err != nil {
		log.Fatal(err)
	}
}
