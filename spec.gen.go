// Package avdimagetypes provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package avdimagetypes

import (
	"encoding/json"
	"errors"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ManagedImageType.
const (
	ManagedImageTypeManagedImage ManagedImageType = "ManagedImage"
)

// Defines values for PlatformImageType.
const (
	PlatformImageTypePlatformImage PlatformImageType = "PlatformImage"
)

// Defines values for SharedImageVersionType.
const (
	SharedImageVersionTypeSharedImageVersion SharedImageVersionType = "SharedImageVersion"
)

// Defines values for V2BundleVersion.
const (
	V2BundleVersionV2 V2BundleVersion = "v2"
)

// Defines values for V2LayerPlatformVersion.
const (
	V2LayerPlatformVersionN2 V2LayerPlatformVersion = "2"
)

// Defines values for V2LayerVersion.
const (
	V2LayerVersionV2 V2LayerVersion = "v2"
)

// ManagedImage defines model for ManagedImage.
type ManagedImage struct {
	ImageId string           `json:"imageId"`
	Type    ManagedImageType `json:"type"`
}

// ManagedImageType defines model for ManagedImage.Type.
type ManagedImageType string

// PlatformImage defines model for PlatformImage.
type PlatformImage struct {
	Offer     string                 `json:"offer"`
	PlanInfo  *PlatformImagePlanInfo `json:"planInfo,omitempty"`
	Publisher string                 `json:"publisher"`
	Sku       string                 `json:"sku"`
	Type      PlatformImageType      `json:"type"`
	Version   string                 `json:"version"`
}

// PlatformImageType defines model for PlatformImage.Type.
type PlatformImageType string

// PlatformImagePlanInfo defines model for PlatformImagePlanInfo.
type PlatformImagePlanInfo struct {
	PlanName      string `json:"planName"`
	PlanProduct   string `json:"planProduct"`
	PlanPublisher string `json:"planPublisher"`
}

// SharedImageVersion defines model for SharedImageVersion.
type SharedImageVersion struct {
	ImageVersionId string                 `json:"imageVersionId"`
	Type           SharedImageVersionType `json:"type"`
}

// SharedImageVersionType defines model for SharedImageVersion.Type.
type SharedImageVersionType string

// V2Bundle defines model for V2Bundle.
type V2Bundle struct {
	CliVersion string          `json:"cli_version"`
	Layers     []V2Layer       `json:"layers"`
	Version    V2BundleVersion `json:"version"`
}

// V2BundleVersion defines model for V2Bundle.Version.
type V2BundleVersion string

// V2Layer Properties schema for an image layer
type V2Layer struct {
	Author    V2LayerAuthor         `json:"author"`
	BaseImage *V2Layer_BaseImage    `json:"base_image,omitempty"`
	Name      string                `json:"name"`
	Network   *V2LayerNetworkConfig `json:"network,omitempty"`

	// PlatformVersion The version of the AVD platform this layer expects and requires to work
	PlatformVersion V2LayerPlatformVersion `json:"platform_version"`
	Version         V2LayerVersion         `json:"version"`
}

// V2Layer_BaseImage defines model for V2Layer.BaseImage.
type V2Layer_BaseImage struct {
	union json.RawMessage
}

// V2LayerPlatformVersion The version of the AVD platform this layer expects and requires to work
type V2LayerPlatformVersion string

// V2LayerVersion defines model for V2Layer.Version.
type V2LayerVersion string

// V2LayerAuthor defines model for V2LayerAuthor.
type V2LayerAuthor struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  string               `json:"name"`
}

// V2LayerNetworkConfig defines model for V2LayerNetworkConfig.
type V2LayerNetworkConfig struct {
	// HttpProxyWhitelist HTTP(s) hosts that are whitelisted in the proxy. Note that the application must be configured to use the proxy or support Windows IE proxy settings
	HttpProxyWhitelist     *[]string                               `json:"http_proxy_whitelist,omitempty"`
	WhitelistedInternalIps *[]V2LayerNetworkWhitelistedInternalIPs `json:"whitelisted_internal_ips,omitempty"`

	// WhitelistedPublicIps List of IPs or CIDR ranges that are whitelisted for outgoing connections. These should be public IPs
	WhitelistedPublicIps *[]V2LayerNetworkWhitelistedPublicIP `json:"whitelisted_public_ips,omitempty"`
}

// V2LayerNetworkWhitelistedInternalIPs defines model for V2LayerNetworkWhitelistedInternalIPs.
type V2LayerNetworkWhitelistedInternalIPs struct {
	Hostname string `json:"hostname"`

	// Port port or port range
	Port *string `json:"port,omitempty"`
}

// V2LayerNetworkWhitelistedPublicIP defines model for V2LayerNetworkWhitelistedPublicIP.
type V2LayerNetworkWhitelistedPublicIP struct {
	// Port port or port range
	Port *string `json:"port,omitempty"`

	// Target IP or CIDR range
	Target string `json:"target"`
}

// AsManagedImage returns the union data inside the V2Layer_BaseImage as a ManagedImage
func (t V2Layer_BaseImage) AsManagedImage() (ManagedImage, error) {
	var body ManagedImage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromManagedImage overwrites any union data inside the V2Layer_BaseImage as the provided ManagedImage
func (t *V2Layer_BaseImage) FromManagedImage(v ManagedImage) error {
	v.Type = "ManagedImage"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeManagedImage performs a merge with any union data inside the V2Layer_BaseImage, using the provided ManagedImage
func (t *V2Layer_BaseImage) MergeManagedImage(v ManagedImage) error {
	v.Type = "ManagedImage"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformImage returns the union data inside the V2Layer_BaseImage as a PlatformImage
func (t V2Layer_BaseImage) AsPlatformImage() (PlatformImage, error) {
	var body PlatformImage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformImage overwrites any union data inside the V2Layer_BaseImage as the provided PlatformImage
func (t *V2Layer_BaseImage) FromPlatformImage(v PlatformImage) error {
	v.Type = "PlatformImage"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformImage performs a merge with any union data inside the V2Layer_BaseImage, using the provided PlatformImage
func (t *V2Layer_BaseImage) MergePlatformImage(v PlatformImage) error {
	v.Type = "PlatformImage"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSharedImageVersion returns the union data inside the V2Layer_BaseImage as a SharedImageVersion
func (t V2Layer_BaseImage) AsSharedImageVersion() (SharedImageVersion, error) {
	var body SharedImageVersion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSharedImageVersion overwrites any union data inside the V2Layer_BaseImage as the provided SharedImageVersion
func (t *V2Layer_BaseImage) FromSharedImageVersion(v SharedImageVersion) error {
	v.Type = "SharedImageVersion"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSharedImageVersion performs a merge with any union data inside the V2Layer_BaseImage, using the provided SharedImageVersion
func (t *V2Layer_BaseImage) MergeSharedImageVersion(v SharedImageVersion) error {
	v.Type = "SharedImageVersion"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t V2Layer_BaseImage) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t V2Layer_BaseImage) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ManagedImage":
		return t.AsManagedImage()
	case "PlatformImage":
		return t.AsPlatformImage()
	case "SharedImageVersion":
		return t.AsSharedImageVersion()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t V2Layer_BaseImage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *V2Layer_BaseImage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
