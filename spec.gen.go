// Code generated by github.com/swaggest/json-cli v1.11.2, DO NOT EDIT.

// Package avdimagetypes contains JSON mapping structures.
package avdimagetypes

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// V2BundleProperties structure is generated from "stdin#/definitions/V2BundleProperties".
//
// V2 Bundle Properties.
type V2BundleProperties struct {
	Version    V2BundlePropertiesVersion `json:"version"`     // Required.
	CliVersion string                    `json:"cli_version"` // Required.
	Layers     []V2LayerProperties       `json:"layers"`      // Required.
}

// V2LayerProperties structure is generated from "#/definitions/V2LayerProperties".
//
// V2 Layer Properties.
type V2LayerProperties struct {
	Version V2LayerPropertiesVersion `json:"version"` // Required.
	// Value must match pattern: `^[a-zA-Z0-9-.]+$`.
	// Required.
	Name        string                      `json:"name"`
	Description string                      `json:"description,omitempty"`
	Author      V2LayerPropertiesAuthor     `json:"author"` // Required.
	BaseImage   *V2LayerPropertiesBaseImage `json:"base_image,omitempty"`
	Network     *V2LayerPropertiesNetwork   `json:"network,omitempty"`
	// The version of the AVD platform this layer expects and requires to work.
	// Required.
	PlatformVersion V2LayerPropertiesPlatformVersion `json:"platform_version"`
}

// V2LayerPropertiesAuthor structure is generated from "#/definitions/V2LayerProperties->author".
type V2LayerPropertiesAuthor struct {
	Name  string `json:"name"`            // Required.
	Email string `json:"email,omitempty"` // Format: email.
}

// ManagedImage structure is generated from "#/definitions/V2LayerProperties->base_image/oneOf/0".
//
// Managed Image.
type ManagedImage struct {
	Type    ManagedImageType `json:"type"`    // Required.
	ImageID string           `json:"imageId"` // Required.
}

// PlatformImage structure is generated from "#/definitions/V2LayerProperties->base_image/oneOf/1".
//
// Platform Image.
type PlatformImage struct {
	Type      PlatformImageType      `json:"type"`               // Required.
	Offer     string                 `json:"offer"`              // Required.
	PlanInfo  *PlatformImagePlanInfo `json:"planInfo,omitempty"` // Platform Image Plan Info.
	Publisher string                 `json:"publisher"`          // Required.
	Sku       string                 `json:"sku"`                // Required.
	Version   string                 `json:"version"`            // Required.
}

// PlatformImagePlanInfo structure is generated from "#/definitions/V2LayerProperties->base_image/oneOf/1->planInfo".
//
// Platform Image Plan Info.
type PlatformImagePlanInfo struct {
	PlanName      string `json:"planName"`      // Required.
	PlanProduct   string `json:"planProduct"`   // Required.
	PlanPublisher string `json:"planPublisher"` // Required.
}

// SharedImageVersion structure is generated from "#/definitions/V2LayerProperties->base_image/oneOf/2".
//
// Shared Image Version.
type SharedImageVersion struct {
	Type           SharedImageVersionType `json:"type"`           // Required.
	ImageVersionID string                 `json:"imageVersionId"` // Required.
}

// V2LayerPropertiesBaseImage structure is generated from "#/definitions/V2LayerProperties->base_image".
type V2LayerPropertiesBaseImage struct {
	ManagedImage       *ManagedImage       `json:"-"`
	PlatformImage      *PlatformImage      `json:"-"`
	SharedImageVersion *SharedImageVersion `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (v *V2LayerPropertiesBaseImage) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &v.ManagedImage)
	if err != nil {
		oneOfErrors["ManagedImage"] = err
		v.ManagedImage = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &v.PlatformImage)
	if err != nil {
		oneOfErrors["PlatformImage"] = err
		v.PlatformImage = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &v.SharedImageVersion)
	if err != nil {
		oneOfErrors["SharedImageVersion"] = err
		v.SharedImageVersion = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for V2LayerPropertiesBaseImage with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (v V2LayerPropertiesBaseImage) MarshalJSON() ([]byte, error) {
	return marshalUnion(v.ManagedImage, v.PlatformImage, v.SharedImageVersion)
}

// V2LayerPropertiesNetwork structure is generated from "#/definitions/V2LayerProperties->network".
type V2LayerPropertiesNetwork struct {
	HTTPProxyWhitelist     []string                                              `json:"http_proxy_whitelist,omitempty"`   // HTTP(s) hosts that are whitelisted in the proxy. Note that the application must be configured to use the proxy or support Windows IE proxy settings.
	WhitelistedPublicIps   []V2LayerPropertiesNetworkWhitelistedPublicIpsItems   `json:"whitelisted_public_ips,omitempty"` // List of IPs or CIDR ranges that are whitelisted for outgoing connections. These should be public IPs.
	WhitelistedInternalIps []V2LayerPropertiesNetworkWhitelistedInternalIpsItems `json:"whitelisted_internal_ips,omitempty"`
}

// V2LayerPropertiesNetworkWhitelistedPublicIpsItems structure is generated from "#/definitions/V2LayerProperties->network->whitelisted_public_ips->items".
type V2LayerPropertiesNetworkWhitelistedPublicIpsItems struct {
	// IP or CIDR range.
	// Required.
	Target string `json:"target"`
	// Port or port range.
	// Value must match pattern: `^([0-9]{1,5}|[0-9]{1,5}-[0-9]{1,5})$`.
	Port string `json:"port,omitempty"`
}

// V2LayerPropertiesNetworkWhitelistedInternalIpsItems structure is generated from "#/definitions/V2LayerProperties->network->whitelisted_internal_ips->items".
type V2LayerPropertiesNetworkWhitelistedInternalIpsItems struct {
	// Value must match pattern: `^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?$`.
	// Required.
	Hostname string `json:"hostname"`
	// Port or port range.
	// Value must match pattern: `^([0-9]{1,5}|[0-9]{1,5}-[0-9]{1,5})$`.
	Port string `json:"port,omitempty"`
}

// V2BundlePropertiesVersion is an enum type.
type V2BundlePropertiesVersion string

// V2BundlePropertiesVersion values enumeration.
const (
	V2BundlePropertiesVersionV2 = V2BundlePropertiesVersion("v2")
)

// MarshalJSON encodes JSON.
func (i V2BundlePropertiesVersion) MarshalJSON() ([]byte, error) {
	switch i {
	case V2BundlePropertiesVersionV2:

	default:
		return nil, fmt.Errorf("unexpected V2BundlePropertiesVersion value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *V2BundlePropertiesVersion) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := V2BundlePropertiesVersion(ii)

	switch v {
	case V2BundlePropertiesVersionV2:

	default:
		return fmt.Errorf("unexpected V2BundlePropertiesVersion value: %v", v)
	}

	*i = v

	return nil
}

// V2LayerPropertiesVersion is an enum type.
type V2LayerPropertiesVersion string

// V2LayerPropertiesVersion values enumeration.
const (
	V2LayerPropertiesVersionV2 = V2LayerPropertiesVersion("v2")
)

// MarshalJSON encodes JSON.
func (i V2LayerPropertiesVersion) MarshalJSON() ([]byte, error) {
	switch i {
	case V2LayerPropertiesVersionV2:

	default:
		return nil, fmt.Errorf("unexpected V2LayerPropertiesVersion value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *V2LayerPropertiesVersion) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := V2LayerPropertiesVersion(ii)

	switch v {
	case V2LayerPropertiesVersionV2:

	default:
		return fmt.Errorf("unexpected V2LayerPropertiesVersion value: %v", v)
	}

	*i = v

	return nil
}

// ManagedImageType is a constant type.
type ManagedImageType string

// ManagedImageType values enumeration.
const (
	ManagedImageTypeManagedImage = ManagedImageType("ManagedImage")
)

// MarshalJSON encodes JSON.
func (i ManagedImageType) MarshalJSON() ([]byte, error) {
	switch i {
	case ManagedImageTypeManagedImage:

	default:
		return nil, fmt.Errorf("unexpected ManagedImageType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ManagedImageType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ManagedImageType(ii)

	switch v {
	case ManagedImageTypeManagedImage:

	default:
		return fmt.Errorf("unexpected ManagedImageType value: %v", v)
	}

	*i = v

	return nil
}

// PlatformImageType is a constant type.
type PlatformImageType string

// PlatformImageType values enumeration.
const (
	PlatformImageTypePlatformImage = PlatformImageType("PlatformImage")
)

// MarshalJSON encodes JSON.
func (i PlatformImageType) MarshalJSON() ([]byte, error) {
	switch i {
	case PlatformImageTypePlatformImage:

	default:
		return nil, fmt.Errorf("unexpected PlatformImageType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PlatformImageType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PlatformImageType(ii)

	switch v {
	case PlatformImageTypePlatformImage:

	default:
		return fmt.Errorf("unexpected PlatformImageType value: %v", v)
	}

	*i = v

	return nil
}

// SharedImageVersionType is a constant type.
type SharedImageVersionType string

// SharedImageVersionType values enumeration.
const (
	SharedImageVersionTypeSharedImageVersion = SharedImageVersionType("SharedImageVersion")
)

// MarshalJSON encodes JSON.
func (i SharedImageVersionType) MarshalJSON() ([]byte, error) {
	switch i {
	case SharedImageVersionTypeSharedImageVersion:

	default:
		return nil, fmt.Errorf("unexpected SharedImageVersionType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *SharedImageVersionType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := SharedImageVersionType(ii)

	switch v {
	case SharedImageVersionTypeSharedImageVersion:

	default:
		return fmt.Errorf("unexpected SharedImageVersionType value: %v", v)
	}

	*i = v

	return nil
}

// V2LayerPropertiesPlatformVersion is an enum type.
type V2LayerPropertiesPlatformVersion string

// V2LayerPropertiesPlatformVersion values enumeration.
const (
	V2LayerPropertiesPlatformVersion2 = V2LayerPropertiesPlatformVersion("2")
)

// MarshalJSON encodes JSON.
func (i V2LayerPropertiesPlatformVersion) MarshalJSON() ([]byte, error) {
	switch i {
	case V2LayerPropertiesPlatformVersion2:

	default:
		return nil, fmt.Errorf("unexpected V2LayerPropertiesPlatformVersion value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *V2LayerPropertiesPlatformVersion) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := V2LayerPropertiesPlatformVersion(ii)

	switch v {
	case V2LayerPropertiesPlatformVersion2:

	default:
		return fmt.Errorf("unexpected V2LayerPropertiesPlatformVersion value: %v", v)
	}

	*i = v

	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := []byte("{")
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
